var context, canvas, color = { r: 255, g: 255, b: 255 };
var electrons = [];
var photons = [];
var probPhotons = 0.1;
var hc = 12407001993e-16;
var m_nm = 1e-9;
var thr = 0;
var current_wavelength = 500;
var interval_id;
var potential_thr = 0;
var electron_max_dst = 1;
var factor_speed = 1;

window.onload = init;

function init() {
    canvas = document.querySelector("#photoelectric-effect-animation");
    context = canvas.getContext("2d");
    context.canvas.width = 625 * window.devicePixelRatio;
    context.canvas.height = 496 * window.devicePixelRatio;
    context.canvas.style.width = "625px";
    context.canvas.style.height = "496px";
    context.scale(window.devicePixelRatio, window.devicePixelRatio);
    interval_id = setInterval(draw_particles, 50);

    var e = document.querySelector("#spectrum .slider");
    var t = document.querySelector("#potential .slider");
    t.value = 0;

    var n = document.querySelector("#metal");
    var r = document.querySelectorAll("aside .label span");
    r[0].innerHTML = n.options[0].dataset.f;
    r[1].textContent = n.options[0].dataset.w;
    potential_thr = hc / (e.value * m_nm) - parseFloat(r[1].innerHTML);

    if (potential_thr < 0) {
        r[2].textContent = 0;
    } else {
        r[2].textContent = Math.round(potential_thr * 100) / 100;
    }

    thr = n.options[0].dataset.thr;

    n.onchange = function (i) {
        r[0].innerHTML = n.options[n.selectedIndex].dataset.f;
        r[1].textContent = n.options[n.selectedIndex].dataset.w;
        thr = n.options[n.selectedIndex].dataset.thr;
        potential_thr = hc / (e.value * m_nm) - parseFloat(r[1].innerHTML);

        if (potential_thr < 0) {
            r[2].textContent = 0;
        } else {
            r[2].textContent = Math.round(potential_thr * 100) / 100;
        }

        update_weights(t);
    };

    var i = document.querySelectorAll("#spectrum .label span");
    i[0].textContent = e.value;
    i[1].textContent = Math.round((hc / (e.value * m_nm)) * 100) / 100;
    potential_thr = hc / (e.value * m_nm) - parseFloat(r[1].innerHTML);
    wavelengthToRGB(e.value);
    current_wavelength = e.value;

    e.oninput = function () {
        clearInterval(interval_id);
        interval_id = setInterval(draw_particles, e.value / 10);
        i[0].textContent = e.value;
        i[1].textContent = Math.round((hc / (e.value * m_nm)) * 100) / 100;
        potential_thr = hc / (e.value * m_nm) - parseFloat(r[1].innerHTML);

        if (potential_thr < 0) {
            r[2].textContent = 0;
        } else {
            r[2].textContent = Math.round(potential_thr * 100) / 100;
        }

        wavelengthToRGB(e.value);
        current_wavelength = e.value;
        update_weights(t);
    };

    var s = document.querySelector("#intensity .slider");
    var o = document.querySelector("#intensity .label span");
    o.textContent = s.value;

    s.oninput = function () {
        o.textContent = s.value;
        probPhotons = s.value / 50;
    };

    var u = document.querySelector("#potential .label span");
    u.textContent = t.value;

    t.oninput = function () {
        update_weights(t);

        if (t.value > 0 && canvas.style.backgroundImage !== 'url("i/scheme-flat-battery.svg")') {
            canvas.style.backgroundImage = "url(i/scheme-flat-battery.svg)";
        } else if (t.value === "0" && canvas.style.backgroundImage !== 'url("i/scheme-flat-no-battery.svg")') {
            canvas.style.backgroundImage = "url(i/scheme-flat-no-battery.svg)";
        }

        u.textContent = t.value;
    };

    init_data();
}

function draw_particles() {
    var e = Math.random();

    if (e < probPhotons) {
        photons.push({
            x: Math.round(Math.random() * 80) + 320,
            y: 110
        });
    }

    context.clearRect(0, 0, canvas.width, canvas.height);
    context.fillStyle = "rgb(" + color.r + "," + color.g + "," + color.b + ")";
    context.lineWidth = 1;

    for (var t = 0; t < photons.length; t++) {
        context.beginPath();
var amplitude = 10; // Amplitud de la curva seno
var frequency = 0.4; // Frecuencia de la curva seno
var startX = photons[t].x; // Posición inicial en el eje x
var startY = photons[t].y + amplitude * Math.sin(startX * frequency); // Posición inicial en el eje y

context.moveTo(startX, startY);

for (var i = startX; i < startX + 30; i++) {
  var x = i;
  var y = photons[t].y + amplitude * Math.sin(x * frequency);
  context.lineTo(x, y);
}

context.lineTo(startX + 30, startY); // Conectar el último punto con el punto inicial
context.lineTo(startX, startY); // Cerrar el camino

context.lineWidth = 5;
context.fillStyle = "rgb(" + color.r + "," + color.g + "," + color.b + ")";
context.fill();
context.stroke();
context.closePath();

    }

    if (current_wavelength <= thr && potential_thr > 0) {
        context.fillStyle = "rgb(0,0,255)";

        for (var t = 0; t < electrons.length; t++) {
            context.beginPath();
            context.arc(electrons[t].x, electrons[t].y, 3, 0, Math.PI * 2, true);
            context.fill();
            context.closePath();

            if (electron_max_dst < 1) {
                if (electrons[t].x > electron_max_dst * 480 && electrons[t].speed > 0) {
                    electrons[t].speed = -electrons[t].speed;
                }
            } else if (electrons[t].speed < 0) {
                electrons[t].speed = -electrons[t].speed;
            }

            electrons[t].x += electrons[t].speed * factor_speed;

            if (electrons[t].x > 480 || (electrons[t].x < 130 && electrons[t].speed < 0)) {
                electrons.splice(t, 1);
            }
        }
    } else {
        electrons.splice(0, electrons.length);
    }

    var t = photons.length;

    while (t--) {
        photons[t].x -= 2;
        photons[t].y += 0.9;

        if (photons[t].x < 120) {
            electrons.push({
                x: photons[t].x,
                y: photons[t].y,
                speed: 0.75
            });

            photons.splice(t, 1);
        }
    }
}

function update_weights(e) {
    var t = parseFloat(e.value);

    if (t > potential_thr) {
        electron_max_dst = 1 - (t - potential_thr) / (2 - potential_thr);
        electron_max_dst = electron_max_dst * 0.4 + 0.4;
        factor_speed = (t - potential_thr) / (2 - potential_thr);
    } else {
        electron_max_dst = 1;
        factor_speed = (potential_thr - t) / potential_thr;
    }

    factor_speed = factor_speed * 0.5 + 0.5;
}

function wavelengthToRGB(e) {
    if (e < 380) {
        color.r = 128;
        color.g = 128;
        color.b = 128;
    } else {
        if (e < 439) {
            color.r = Math.round((440 - e) / 60 * 255);
            color.g = 0;
            color.b = 255;
        } else if (e < 490) {
            color.r = 0;
            color.g = Math.round((e - 440) / 50 * 255);
            color.b = 255;
        } else if (e < 510) {
            color.r = 0;
            color.g = 255;
            color.b = Math.round((510 - e) / 20 * 255);
        } else if (e < 580) {
            color.r = Math.round((e - 510) / 70 * 255);
            color.g = 255;
            color.b = 0;
        } else if (e < 645) {
            color.r = 255;
            color.g = Math.round((645 - e) / 65 * 255);
            color.b = 0;
        } else if (e < 700) {
            color.r = 255;
            color.b = 0;
            color.g = 0;
        } else {
            color.r = 128;
            color.g = 128;
            color.b = 128;
        }
    }
}

function init_data() {
    // Tu código de inicialización de datos aquí
}
